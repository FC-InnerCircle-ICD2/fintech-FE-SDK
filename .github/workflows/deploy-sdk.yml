name: Deploy SDK to NPM and AWS

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check and update package version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "Current package.json version: $CURRENT_VERSION"
          echo "Git tag version: $TAG_VERSION"

          # Ìï≠ÏÉÅ package.json Î≤ÑÏ†ÑÏùÑ ÌÉúÍ∑∏ Î≤ÑÏ†ÑÏúºÎ°ú Í∞ïÏ†ú ÏÑ§Ï†ï
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.version = '$TAG_VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          echo "üì¶ Updated package.json version to $TAG_VERSION"

      - name: Build SDK
        run: yarn build

      - name: Publish to NPM
        run: |
          echo "üöÄ Publishing to NPM..."
          npm publish --access public
          echo "‚úÖ Successfully published to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy files to S3
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "üì§ Deploying files to S3 (v$VERSION and latest)"

          echo "üìÑ Uploading JavaScript files..."
          for file in dist/*.es.js dist/*.umd.js; do
            echo "  - Uploading $(basename $file)..."
            aws s3 cp "$file" "s3://${{ secrets.S3_BUCKET_NAME }}/sdk/v$VERSION/$(basename $file)" --content-type "application/javascript"
            aws s3 cp "$file" "s3://${{ secrets.S3_BUCKET_NAME }}/sdk/latest/$(basename $file)" --content-type "application/javascript"
          done

          echo "üìÑ Uploading TypeScript files..."
          for file in dist/*.d.ts; do
            echo "  - Uploading $(basename $file)..."
            aws s3 cp "$file" "s3://${{ secrets.S3_BUCKET_NAME }}/sdk/v$VERSION/$(basename $file)" --content-type "application/typescript"
            aws s3 cp "$file" "s3://${{ secrets.S3_BUCKET_NAME }}/sdk/latest/$(basename $file)" --content-type "application/typescript"
          done
          echo "‚úÖ S3 deployment completed"

      - name: Create CloudFront invalidation
        run: |
          echo "üîÑ Creating CloudFront invalidation..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUD_FRONT_ID }} \
            --paths "/sdk/v${{ steps.get_version.outputs.VERSION }}/*" "/sdk/latest/*"
          echo "‚úÖ CloudFront invalidation completed"
